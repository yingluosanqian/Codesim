name: Detect Code Plagiarism 

on:
  workflow_dispatch:
    inputs:
      root:
        description: 'Root dir for codes'
        required: true
        default: 'examples'

env:
  CARGO_TERM_COLOR: always

jobs:
  run:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
      - name: Download bits/stdc++.h
        run: |
          sudo mkdir /Library/Developer/CommandLineTools/usr/include/c++/v1/bits
          sudo chmod 777 /Library/Developer/CommandLineTools/usr/include/c++/v1/bits
          sudo curl https://raw.githubusercontent.com/tekfyl/bits-stdc-.h-for-mac/master/stdc%2B%2B.h > /Library/Developer/CommandLineTools/usr/include/c++/v1/bits/stdc++.h
          mkdir /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/bits
          cp /Library/Developer/CommandLineTools/usr/include/c++/v1/bits/stdc++.h /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/bits/stdc++.h
          cat /Library/Developer/CommandLineTools/usr/include/c++/v1/bits/stdc++.h
      - name: Build
        run: cargo install --path .
      - name: Detect
        uses: actions/github-script@v5
        with:
          script: |
            const { readdirSync, writeFileSync } = require('fs');
            const dirents = readdirSync('${{ github.event.inputs.root }}', { withFileTypes: true });
            const files = [];
            for (const dirent of dirents) {
              if (dirent.isFile()) {
                files.push('./${{ github.event.inputs.root }}/' + dirent.name);
              }
            }
            const result = [];
            for (const a of files) {
              for (const b of files) {
                if (a !== b) {
                  try {
                    let val = (await exec.getExecOutput('codesim', [a, b])).stdout;
                    result.push({
                      a, b, val: Number.parseFloat(val)
                    });
                  } catch {}
                }
              }
            }
            result.sort((lhs, rhs) => rhs.val - lhs.val);
            for (const { a, b, val } of result) {
              console.log(`${a} v.s. ${b} : ${val}`);
            }
            writeFileSync('data.csv', result.map(r => `${r.a}, ${r.b}, ${r.val}`).join('\n'), 'utf-8');
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: data.csv
